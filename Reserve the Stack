#include <vector>
#include <iostream>
using namespace std;
class ReverseStack
{
public:
	vector<int> reverseStackRecursively(vector<int> stack, int top)
	{
		// write code here
		vector<int> tmp;
		if (stack.empty())
			return tmp;
		int a = GetLastandDel(stack);
		stack=reverseStackRecursively(stack, top - 1);  //stack point to an empty container
		stack.push_back(a);
		return stack;
	}
	int GetLastandDel(vector<int>& stack)
	{
		int top = stack.back();
		stack.pop_back();
		if (stack.empty())  //If there is only one element, it is the bottom of the stack
			return top;
		else              //pop pop ... stack is empty go to the if and return the bottom of the stack push push...
		{                 //The bottom of the stack is removed with one less push
			int end=GetLastandDel(stack);
			stack.push_back(top);
			return end;
		}
	}
};
int main() {
	vector<int> st;
	st.push_back(1); st.push_back(2); st.push_back(3);
	ReverseStack rs;
	rs.reverseStackRecursively(st,st.size());
	for (int i = 0; i < 3; i++) 
	{
		cout << st.back() << endl;
		st.pop_back();
	}
	system("pause");
	return 0;
}
