# coding=utf-8
import math, copy


# 修改数组找出重复的数字  题目：在一个长度为 n 的数组里的所有数字都在 0 ~ n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7
# 的数组{2,3, 1,0,2,5,3}，那么对应的输出是重复的数字2或者3。
#
# 按照数组下标取数的时间复杂度为 O(1)
# 从头到尾依次扫描这个数组中的每个数字。
# 当扫描到下标为 i 的数字时，首先比较这个数字(用 m 表示)是不是等于 i，如果是，则接着扫描下一个数字;如果不是，则再拿它和第 m 个数字进行比较。
# 如果它和第 m 个数字相等，就找到了一个重复的数字(该数字在下标为 i 和 m 的位置都出现了);
# 如果它和第 m 个数字不相等，就把第 i 个数字和第 m 个数字交换，把 m 放到属于它的位置。接下来再重复这个比较、交换的过程，直到我们发现一一个重复的数字。
def start(input_array):
    start.result = []
    start.flag = True
    start.array = input_array
    for i in range(len(input_array)):
        # 参数判断
        if start.flag:
            compare(i)
        else:
            return 'list parameters is None or list values out of len(list)-1'
    return 'Repeated numbers:' + ','.join(start.result)


def compare(i):
    if start.array[i] == i:
        pass
    else:
        try:
            # 注意先后顺序 NONETYPE has not len()
            if start.array is not None:
                # 空列表参数算作正确入参 出口同正确结果
                if len(start.array) == 0:
                    pass
                else:
                    assert (0 <= start.array[i] < len(start.array))
                    if start.array[i] == start.array[start.array[i]]:
                        start.result.append(str(start.array[i]))
                    else:
                        temp = start.array[i]
                        start.array[i] = start.array[start.array[i]]
                        start.array[temp] = temp
                        compare(i)
            # None参数算作错误入参  出口同start.flag == False
            else:
                start.flag = False
        except Exception as e:
            print(e)
            start.flag = False


# # 长度为n的数组里包含一个或者多个重复的数字
# input_array = [4, 3, 2, 4, 5, 5]
# print(start(input_array))
#
# # 数组中不包含重复数字
# input_array = [4, 1, 2, 0, 5, 3, 6]
# print(start(input_array))
#
# # 无效输入测试用例--空数组
# input_array = []
# print(start(input_array))
#
# # 无效输入测试用例--长度为n的数组中包含0——n-1 之外的数字
# input_array = [1, 7, 1, 2, 2]
# print(start(input_array))


# 不修改数组找出重复的数字    题目：在一个长度为 n+1 的数组里的所有数字都在 1~n 的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为8的数组{2,3,5,4,
# 3,2,6,7}，那么对应的输出是重复的数字2或者3。
#
# 我们把从 1~n 的数字从中间的数字 m 分为两部分，前面一半为 1~m,后面一半为 m+1~n。 如果 1~m 的数字的数目超过 m ,那么这一半的区间里一定包含重复的数字;否则，另一半 m+1~n 的区间里一定包含重复的数字。
# 我们可以继续把包含重复数字的区间一分为二，直到找到一个重复的数字。 代码按照二分查找的思路，如果输入长度为 n 的数组，那么遍历数组将被调用 O(logn) 次，每次需要 O(n) 的时间，因此总的时间复杂度是 O(nlogn)
# ,空间复杂度为 0(1) 。和最前面提到的需要 0(n) 的辅助空间的算法相比，这种算法相当于以时间换空间。

def anyone_unrepeated_numbers(input_array):
    if input_array is None or len(input_array) == 0:
        print("input error!")
        return
    left = 1
    right = len(input_array) - 1
    while left <= right:
        mid = ((right - left) >> 1) + left
        # 找input_array里在[left, mid]的数目
        count = find_count(input_array, left, mid)
        if left == right:
            if count > 1:
                print(left)
                return 0
            else:
                print("no repeated numbers!!")
                return -1
        # 左区间有重复数字
        if count > mid - left + 1:
            right = mid
        else:
            left = mid + 1


def find_count(input_array, left, right):
    count = 0
    for i in input_array:
        if left <= i <= right:
            count = count + 1
        else:
            pass
    return count


# # 长度为n的数组里包含一个或者多个重复的数字
# input_array = [2, 3, 5, 4, 1, 4, 3, 7]
# anyone_unrepeated_numbers(input_array)
#
# # 数组中不包含重复数字
# input_array = [2, 3, 5, 4, 1, 6, 8, 7]
# anyone_unrepeated_numbers(input_array)
#
# # 数组中只包含两个重复数字
# input_array = [1, 1]
# anyone_unrepeated_numbers(input_array)
#
# # 数组中只包含两个不重复数字
# input_array = [1, 2]
# anyone_unrepeated_numbers(input_array)
#
# # 输入空数组
# input_array = []
# anyone_unrepeated_numbers(input_array)


# 题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。存在输出True，不存在输出False。
#
# 首先选取数组中右上角的数字。如果该数字等于要查找的数字，则查找过程结束；
# 如果该数字大于要查找的数字，则剔除这个数字所在的列；
# 如果该数字小于要查找的数字，则剔除这个数字所在的行。
def two_array_research(input_array, data):
    if input_array is None or len(input_array) == 0:
        print("input error!!")
        return False
    else:
        # --------- 避免 [[],[],[],[]] 或者 []出现 -------
        while len(input_array) != 0 and len(input_array[0]) != 0:
            # 取右上角元素
            index = len(input_array[0]) - 1
            if data == input_array[0][index]:
                print("find it ", data)
                return True
            elif data > input_array[0][index]:
                # 删行
                del input_array[0]
            else:
                # 删最右侧列
                for i in range(0, len(input_array)):
                    del input_array[i][index]
        print("data is not in array!!")
        return False


# ------------- 边界值测试/错误值测试/空值测试---------------
# # 二维数组中包含查找的数字（查找的数字是数组中的最大值和最小值；查找的数字介于数组中的最大值和最小值之间）。
# two_array = [[1, 2, 8, 9], [2, 4, 9, 12], [4, 7, 10, 13], [6, 8, 11, 15]]
# research_num = 15
# two_array_research(copy.deepcopy(two_array), research_num)
#
# research_num = 1
# two_array_research(copy.deepcopy(two_array), research_num)
#
# research_num = 7
# two_array_research(copy.deepcopy(two_array), research_num)
#
# # 二维数组中没有查找的数字（查找的数字大于数组中的最大值；查找的数字小于数组中的最小值；查找的数字在数组的最大值和最小值之间但数组中没有这个数字）。
# two_array = [[1, 2, 8, 9], [2, 4, 9, 12], [4, 7, 10, 13], [6, 8, 11, 15]]
# research_num = 16
# two_array_research(copy.deepcopy(two_array), research_num)
#
# research_num = 0
# two_array_research(copy.deepcopy(two_array), research_num)
#
# research_num = 3
# two_array_research(copy.deepcopy(two_array), research_num)
#
# # 输入空数组
# two_array = []
# research_num = 15
# two_array_research(two_array, research_num)


# 题目：请实现一个函数，把字符串中的每个空格替换成“%20”。例如，输入“We are happy.”，则输出“We%20are%20happy.”。
#
# 首先遍历输入字符串有多少个空格。
# 根据空格数可以计算新字符串的长度，并且创建该长度的数组
# 再次遍历字符串，如果碰到空格，就把空格前面的字符串赋给新数组，并添加上需要替换空格的字符。
# 把新创建的数组变换成字符串。
# 时间复杂度：O(n)

# ---------测试数据: 前/后/中间/连续空格----------
# ---------way1：str.replace(' ', '%20')--------------
# str = ' We are  happy. '
# str = str.replace(' ', '%20')
# print(str)
# str = 'Wearehappy.'
# str = str.replace(' ', '%20')
# print(str)
# # str = None
# # str.replace(' ', '%20')
# # print(str)
# str = ' '
# str = str.replace(' ', '%20')
# print(str)
# str = ''
# str = str.replace(' ', '%20')
# print(str)


# ---------way2: 模拟实现replace方法-----------
def str_replace(str, src, dest):
    if str == "" or str is None or src == "" or src is None or dest is None:
        print("参数错误!!")
        return
    else:
        # 1.0 遍历空格数目
        count = 0
        for i in str:
            if i == src:
                count = count + 1
        # 2.0 计算新字符串长度
        size = len(str) + (len(dest) - 1) * count
        result_list = [' ' for i in range(size)]
        # 3.0 新列表填充
        j = 0
        for i in range(len(str)):
            if str[i] != ' ':
                result_list[j] = str[i]
                j = j + 1
            else:
                result_list[j] = "%"
                result_list[j+1] = "2"
                result_list[j+2] = "0"
                j = j + 3
        print(''.join(result_list))
        return ''.join(result_list)


def find_char_index(str, src, summary):
    """
    :param str: 源字符串
    :param src: 源字符串待替换的字符
    :param summary: 源字符串第summary个待替换字符
    :return: 源字符串第summary个待替换字符的下标
    """
    count = 0
    for i, ret in enumerate(str):
        if ret == src:
            count = count + 1
            if count == summary:
                return i
        else:
            pass


# print(find_char_index("j sdjhs jh ", ' ', 1))
# 输入的字符串中包含空格（空格位于字符串的最前面；空格位于字符串的最后面；空格位于字符串的中间；字符串中有连续多个空格）。
input_str = ' We are  happy. '
replace_str = '%20'
str_replace(input_str, ' ', replace_str)

# 输入的字符串中没有空格。
input_str = 'Wearehappy.'
replace_str = '%20'
str_replace(input_str, ' ', replace_str)

## 字符串是None
input_str = None
replace_str = '%20'
str_replace(input_str, ' ', replace_str)

# 字符串是空串
input_str = ''
replace_str = '%20'
str_replace(input_str, ' ', replace_str)

# 字符串只有一个空格字符
input_str = ' '
replace_str = '%20'
str_replace(input_str, ' ', replace_str)
