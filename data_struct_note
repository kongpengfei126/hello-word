#include<iostream>
#include<vector>
#include<algorithm>
#include "string.h"
using namespace std;

class max_coins{
    public:
        int coins_value(vector<int> vec){
            //1.0 两侧添加虚拟气球
            int n = vec.size();
            int *points = new int[n+2];
            points[0]=points[n+1]=1;
            for(int i=1;i<=n;i++){
                points[i]=vec[i-1];
            }
            // dp[i][j]含义:戳破i到j之间所有气球获得的最大硬币数即i<j
            int dp[n+2][n+2];
            memset(dp,0,sizeof(dp));
            //k:i与j之间最后一个待戳破的气球
            //待求值为dp[0][n-1] 那么边界值i：n-1~0前闭后闭 k: i+1~j前闭后开 j: i+2~n+1 前闭后闭
            //表达式:dp[i][j] = dp[i][k]+dp[k][j]+points[i]*points[k]*points[j]
            for(int i=n-1;i>=0;i--){
                for(int j=i+2;j<=n+1;j++){
                    for(int k=i+1;k<j;k++){
                        dp[i][j]=max(dp[i][j],dp[i][k]+dp[k][j]+points[i]*points[k]*points[j]);
                    }
                }
            } 
            return dp[0][n+1];
        }
};

class tt_matrix_search{
    public:
        static bool tt_search_value_in_matrix(vector<vector<int> >& vec,int value){
            int m = vec.size();
            if(m==0){ 
                return false;
            }
            int n = vec[0].size();
            int i = m-1;
            int j = 0;
            while(i>=0&&j<n){ 
                if(vec[i][j]==value){
                    return true;
                }
                else if(vec[i][j]<value){
                    j++;
                }
                else{
                    i--;
                }
            }
            return false;
        }
};

// bool search_value_in_matrix(vector<vector<int> >& vec,int value){
//     int m = vec.size();
//     if(m==0){ 
//         return false;
//     }
//     int n = vec[0].size();
//     int i = m-1;
//     int j = 0;
//     while(i>=0&&j<n){ 
//         if(vec[i][j]==value){
//             return true;
//         }
//         else if(vec[i][j]<value){
//             j++;
//         }
//         else{
//             i--;
//         }
//     }
//     return false;
// }

class matrix_search_Kvalue{
    public:
        //matrix中小于等于mid的数量t 判断t是否大于等于k
        static bool mid_is_kth_num_inmatrix(vector<vector<int> >matrix,int k,int n,int mid){
            //1.0 求小于等于mid的个数num
            int i = n-1;
            int j = 0;
            int num = 0;
            while(i>=0&&j<n){
                if(matrix[i][j] <= mid){
                    num += i+1;
                    j++;
                }
                else{
                    i--;
                }
            }
            //2.0 判断num是否大于k
            return num >= k;
        }
        //矩阵：j:自左向右增大 i:自上向下增大 n*n矩阵 求排序后第k大元素
        static int kth_value_in_matrix(vector<vector<int> >matrix,int k){
            int n = matrix.size();
            if(n*n<k)
            {
                return -1;
            }
            int left = matrix[0][0],right = matrix[n-1][n-1];
            while(left<right){
                int mid = left+((right-left)>>1);
                // matrix中小于等于mid的数量t， t>=k
                if(mid_is_kth_num_inmatrix(matrix, k, n, mid)){
                    right = mid;
                }
                else{
                    left = mid+1;
                }
            } 
            return left;
        }

};

//最长重复子数组---return value: 最长重复子数组长度
class max_repeat_subarray{
    public:
        static int len_of_max_repeat_subarray(vector<int> v1,vector<int> v2){
            int m = v1.size();
            int n = v2.size();
            if(m==0||n==0){
                return 0;
            }
            int ret = 0;
            int k = 0;
            for(int i=0;i<m;i++){
                for(int j=0;j<n;j++){
                    k = 0;
                    while(i+k<m&&j+k<n&&v1[i+k]==v2[j+k]){
                        k++;
                    }
                    ret = max(ret,k);
                }
            }
            return ret;                                 
        }
        //最大公共前缀间接求最长重复子数组长度
        static int len_of_max_repeat_subarray_new(vector<int> v1,vector<int> v2){
            int m = v1.size(), n = v2.size();
            int dp[m+1][n+1];
            int max_value = 0;
            memset(dp,0,sizeof(dp));
            for(int i =m-1;i>=0;i--){
                for(int j=n-1;j>=0;j--){
                    v1[i]==v2[j]?dp[i][j]=dp[i+1][j+1]+1:dp[i][j]=0;
                    max_value = max(max_value,dp[i][j]);
                }
            }
            return max_value;
        }
};

//计数二进制子串 "00110011"
//输出: 6
//解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”
// 方法1: 收集连续数字出现次数 '10011100' ==》array[4]={1,2,3,2}, 假设数组相邻的元素为u，v 表示u个1 v个0或者u个0 v个1 那么 结果为min{u,v} 所以将array数组相邻元素求min结果相加即可
class Solution {
public:
    static int countBinarySubstrings(string s) {
        //1.0 统计元素连续出现次数
        int n = s.size();
        vector<int> vec;
        int i = 0,count=0;
        while(i<n){
            count = 0;
            char value = s[i]; 
            while(i<n&&s[i]==value){
                i++;
                count++;
            }
            vec.push_back(count);
        }
        // vector<int>::iterator it = vec.begin();
        // while(it!=vec.end()){
        //     cout<<*it<<"->";
        //     it++;
        // }
        // cout<<"NULL"<<endl;
        //2.0 累加vector元素之间的最小值即min{vec[0],vec[1]}+......+min{vec[vec.size()-2],vec[vec.size()-1]}
        int ret = 0;
        for(int i = 1;i<vec.size();i++){
            ret += min(vec[i],vec[i-1]);
        }
        return ret;
    }

    static int countBinarySubstrings_1(string s) {
        int n = s.size();
        int cur = 1,count = 0,last = 0;
        for(int i=1;i<n;i++){
            if(s[i]==s[i-1]){
                cur++;
            }
            else{
                last = cur;
                cur = 1;
            }
            if(last >= cur){
                count++;
            }     
        }
        return count;
    }
};

//字符串左旋
//way1：使用substr方法
class Solution {
public:
    string reverseLeftWords(string s, int n) {
        int size = s.size();
        return s.substr(n,size-n)+s.substr(0,n);
    }
};

//way2: s+s截取
class Solution {
public:
    string reverseLeftWords(string s, int n) {
        int size = s.size();
        return (s+s).substr(n,size);
    }
};

//way3：构造截取--切片
class Solution {
public:
    string reverseLeftWords(string s, int n) {
        string s1(s,0,n);
        string s2(s,n);
        return s2+s1;
    }
};

//way4: 三次逆置
class Solution {
public:
    void reverse(string& str,int i, int j){
        while(i<j){
            swap(str[i],str[j]);
            ++i;
            --j;
        }
    }
    string reverseLeftWords(string s, int n) {
        int size = s.size();
        if(size==1){
            return s;
        }
        reverse(s,0,n-1);
        reverse(s,n,size-1);
        reverse(s,0,size-1);
        return s;
    }
};
int main()
{
    // cout<<"test!!!"; 
    // 交集测试
    //测试组1------有相同数据
    // int arr1[10] ={10,2,6,9,8,11,2,3,4,12};
    // int arr2[10] = {10,2,6,9,21,11,16,3,4,12};

    //测试组2------无相同数据
    // int arr1[10] ={31,32,33,34,35,36,37,38,39,40};
    // int arr2[10] = {10,2,6,9,21,11,16,3,4,12};

    //测试组3------临界条件
    // int arr1[10];
    // int arr2[10]={31,32,33,34,35,36,37,38,39,40};

    //测试组4------只有末元素相同
    // int arr1[10] ={31,32,33,34,35,36,37,38,39,40};
    // int arr2[10] = {40,2,6,9,21,11,16,3,4,12};  

    // vector<int> v1,v2;
    // for(int i =0;i<10;i++){
    //     v1.push_back(arr1[i]);
    //     v2.push_back(arr2[i]);
    // }
    // int i=0,j=0;
    // vector<int> ret;
    // sort(v1.begin(),v1.end());
    // sort(v2.begin(),v2.end());
    // while(i<v1.size()&&j<v2.size()){
    //     if(v1[i]<v2[j]){
    //         i++;
    //     }
    //     else if(v1[i]>v2[j]){
    //         j++;
    //     }
    //     else{
    //         ret.push_back(v1[i]);
    //         i++;
    //         j++;
    //     }
    // }  
    // if(ret.size()!=0)
    // {
    //     vector<int>::iterator it = ret.begin();
    //     cout<<*it;
    //     ++it;
    //     while(it!=ret.end()){
    //         cout<<"->"<<*it;
    //         it++;
    //     }
    // }
    // else{
    //     cout<<"NULL";
    // }
    // cout<<endl;


    // way2----------调用algorithm方法
    // set_intersection(v1.begin(),v1.end(),v2.begin(),v2.end(),back_inserter(ret));
    // if(ret.size()!=0)
    // {
    //     vector<int>::iterator it = ret.begin();
    //     cout<<*it;
    //     ++it;
    //     while(it!=ret.end()){
    //         cout<<"->"<<*it;
    //         it++;
    //     }
    // }
    // else{
    //     cout<<"NULL";
    // }
    // int a,b;
    // cout<<endl;
    // cout<<endl;   

    // //戳气球测试
    // int arr3[] = {31,32,33,34,35,36,37,38,39,40};  

    // vector<int> v3;
    // for(int i =0;i<10;i++){
    //     v3.push_back(arr3[i]);
    // }   
    // max_coins mc;
    // cout<<mc.coins_value(v3)<<endl; 


    // // 搜索二维矩阵II测试
    // int points[3][4] = {1,3,5,7,
    //                   2,4,6,8,
    //                   4,6,7,9};
    // vector<vector<int> > suv;
    // for(int i=0;i<3;i++){
    //     suv.push_back(vector<int>());
    //     for(int j=0;j<4;j++){
    //         suv[i].push_back(points[i][j]);
    //     } 
    // }
    // cout<<"matrix_search:"<<tt_matrix_search::tt_search_value_in_matrix(suv,9)<<endl;

    // //有序矩阵中第k个数
    // int array[3][3] = {1,3,7,
    //                   2,4,8,
    //                   4,6,9};
    // vector<vector<int> > matrix;
    // for(int i=0;i<3;i++){
    //     matrix.push_back(vector<int>());
    //     for(int j=0;j<3;j++){
    //         matrix[i].push_back(array[i][j]);
    //     } 
    // }
    // cout<<"kthvalueinmatrix:"<<matrix_search_Kvalue::kth_value_in_matrix(matrix,8);

    // //最长重复度子数组
    // vector<int> v4,v5;
    // int arr4[]={1,2,3,2,1};
    // int arr5[]={3,2,1,4,7};
    // for(int i=0;i<5;i++){
    //     v4.push_back(arr4[i]);
    //     v5.push_back(arr5[i]);
    // }
    // cout<<max_repeat_subarray::len_of_max_repeat_subarray(v4,v5)<<endl;
    // cout<<max_repeat_subarray::len_of_max_repeat_subarray_new(v4,v5)<<endl;

    // //计数二进制子串
    // string s = "10011100";
    // cout<<"计数二进制子串"<<Solution::countBinarySubstrings(s)<<"-";
    // cout<<"计数二进制子串"<<Solution::countBinarySubstrings_1(s);

    // //
    system("pause");
    return 0;
}


